const BOT_TOKEN='1992847712:AAF0Obf-7N-NWh9u5GL7qUONBNbiOA4Nvz0';
require('dotenv').config();
const TelegramApi = require('node-telegram-bot-api')
const mongoose = require('mongoose');
const User = require('./user');
const Game = require('./game');
const GlobalStats = require('./globalstats');


mongoose.connect('mongodb+srv://andrew:sosok228@cluster0.rxwip.mongodb.net/test')
.then(() => {
    console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
})
.catch((err) => {
    console.log(err);
})

const bot = new TelegramApi(BOT_TOKEN, {polling: true});


let activeGames = [];
var state = [0];

async function setState(user_id, state_number) { 
    state[user_id] = state_number;
}


function deleteLastMessage(chatId, botMessage) {
    bot.deleteMessage(chatId, botMessage);
}

function playGame(gameId, price, playerOne, playerTwo, gameName, gameNumber) {
    function welcomeMessage(nameOfGame, secArg) {
        bot.sendMessage(playerOne, `${nameOfGame} ${activeGames[gameNumber].id}
üí∞ –ë–∞–Ω–∫: ${price}
–ë—Ä–æ—Å–∞–µ–º ${secArg}...`);
            bot.sendMessage(playerTwo, `${nameOfGame} ${activeGames[gameNumber].id}
üí∞ –ë–∞–Ω–∫: ${price}
–ë—Ä–æ—Å–∞–µ–º ${secArg}...`);
    }
if (gameName === '–ö–æ—Å—Ç–∏') {
    welcomeMessage('–ö–æ—Å—Ç–∏', '–∫–æ—Å—Ç—å')
    let rollOne = 1;
    let rollTwo = 1;
    while (rollOne === rollTwo) {
        rollOne = Math.floor(Math.random() * 6) + 1;
        rollTwo = Math.floor(Math.random() * 6) + 1;
        if (rollOne > rollTwo) {
            function playerOneWin() {
                bot.sendMessage(playerOne, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
                bot.sendMessage(playerTwo, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
            }
            setTimeout(playerOneWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: +price, games: +1, win: +1, dice: +1, dice_win: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: -price, games: +1, lose: +1, dice: +1, dice_lose: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollTwo > rollOne) {
            function playerTwoWin() {
                bot.sendMessage(playerTwo, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
                bot.sendMessage(playerOne, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
            }
            setTimeout(playerTwoWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: -price, games: +1, lose: +1, dice: +1, dice_lose: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: +price, games: +1, win: +1, dice: +1, dice_win: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollTwo === rollOne) {
            bot.sendMessage(playerTwo, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
            bot.sendMessage(playerOne, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
            welcomeMessage('–ö–æ—Å—Ç–∏', '–∫–æ—Å—Ç—å')
        }
    }
} if (gameName === '–î–∞—Ä—Ç—Å') {
    welcomeMessage('–î–∞—Ä—Ç—Å', '–¥—Ä–æ—Ç–∏–∫');
    let rollOne = 1;
    let rollTwo = 1;
    while (rollOne === rollTwo) {
        rollOne = Math.floor(Math.random() * 6) + 1;
        rollTwo = Math.floor(Math.random() * 6) + 1;
        if (rollOne > rollTwo) {
            function playerOneWin() {
                bot.sendMessage(playerOne, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
                bot.sendMessage(playerTwo, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
            }
            setTimeout(playerOneWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: +price, games: +1, win: +1, darts: +1, darts_win: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: -price, games: +1, lose: +1, darts: +1, darts_lose: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollTwo > rollOne) {
            function playerTwoWin() {
                bot.sendMessage(playerTwo, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
                bot.sendMessage(playerOne, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
            }
            setTimeout(playerTwoWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: -price, games: +1, lose: +1, dice: +1, darts_lose: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: +price, games: +1, win: +1, dice: +1, darts_win: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollTwo === rollOne) {
            bot.sendMessage(playerTwo, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
            bot.sendMessage(playerOne, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
            welcomeMessage('–î–∞—Ä—Ç—Å', '–¥—Ä–æ—Ç–∏–∫');
        }
    }
} if (gameName === '–ö–æ—Å—Ç–∏ x2') {
    welcomeMessage('–ö–æ—Å—Ç–∏ x2', '–∫–æ—Å—Ç–∏');
    let rollFirstOfFirstP = 1;
    let rollSecondOfFirstP = 1;
    let rollFirstOfSecondP = 1;
    let rollSecondOfSecondP = 1;
    while (rollFirstOfFirstP + rollSecondOfFirstP === rollFirstOfSecondP + rollSecondOfSecondP) {
        rollFirstOfFirstP = Math.floor(Math.random() * 6) + 1;
        rollSecondOfFirstP = Math.floor(Math.random() * 6) + 1;
        rollFirstOfSecondP = Math.floor(Math.random() * 6) + 1;
        rollSecondOfSecondP = Math.floor(Math.random() * 6) + 1;
        if (rollFirstOfFirstP + rollSecondOfFirstP > rollFirstOfSecondP + rollSecondOfSecondP) {
            function playerOneWin() {
                bot.sendMessage(playerOne, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞–º –≤—ã–ø–∞–ª–æ: ${rollFirstOfFirstP} –∏ ${rollSecondOfFirstP}`);
                bot.sendMessage(playerTwo, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞–º –≤—ã–ø–∞–ª–æ: ${rollFirstOfSecondP} –∏ ${rollSecondOfSecondP}`);
            }
            setTimeout(playerOneWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: +price, games: +1, win: +1, double_dice: +1, double_dice_win: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: -price, games: +1, lose: +1, double_dice: +1, double_dice_lose: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollFirstOfSecondP + rollSecondOfSecondP > rollFirstOfFirstP + rollSecondOfFirstP) {
            function playerTwoWin() {
                bot.sendMessage(playerTwo, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞–º –≤—ã–ø–∞–ª–æ: ${rollFirstOfSecondP} –∏ ${rollSecondOfSecondP}`);
                bot.sendMessage(playerOne, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞–º –≤—ã–ø–∞–ª–æ: ${rollFirstOfFirstP} –∏ ${rollSecondOfFirstP}`);
            }
            setTimeout(playerTwoWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: -price, games: +1, lose: +1, double_dice: +1, double_dice_lose: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: +price, games: +1, win: +1, double_dice: +1, double_dice_win: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollFirstOfFirstP + rollSecondOfFirstP === rollFirstOfSecondP + rollSecondOfSecondP) {
            bot.sendMessage(playerTwo, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollFirstOfSecondP} –∏ ${rollSecondOfSecondP}`);
            bot.sendMessage(playerOne, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollFirstOfFirstP} –∏ ${rollSecondOfFirstP}`);
            welcomeMessage('–ö–æ—Å—Ç–∏ x2', '–∫–æ—Å—Ç–∏');
        }
    }
} if (gameName === '–ë–∞—Å–∫–µ—Ç–±–æ–ª') {
    welcomeMessage('–ë–∞—Å–∫–µ—Ç–±–æ–ª', '–º—è—á');
    let rollOne = 1;
    let rollTwo = 1;
    while (rollOne === rollTwo) {
        rollOne = Math.floor(Math.random( ) * (1+1));
        rollTwo = Math.floor(Math.random( ) * (1+1));
        if (rollOne > rollTwo) {
            function playerOneWin() {
                bot.sendMessage(playerOne, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
                bot.sendMessage(playerTwo, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
            }
            setTimeout(playerOneWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: +price, games: +1, win: +1, basketball: +1, basketball_win: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: -price, games: +1, lose: +1, basketball: +1, basketball_lose: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollTwo > rollOne) {
            function playerTwoWin() {
                bot.sendMessage(playerTwo, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
                bot.sendMessage(playerOne, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
            }
            setTimeout(playerTwoWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: -price, games: +1, lose: +1, basketball: +1, basketball_lose: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: +price, games: +1, win: +1, basketball: +1, basketball_win: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollTwo === rollOne) {
            bot.sendMessage(playerTwo, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
            bot.sendMessage(playerOne, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
            welcomeMessage('–ë–∞—Å–∫–µ—Ç–±–æ–ª', '–º—è—á');
        }
    }
} if (gameName === '–î–∂–µ–∫–ø–æ—Ç') {
    let diceRollOne = 1;
    let basketballRollOne = 1;
    let dartsRollOne = 1;
    let diceRollSecond = 1;
    let basketballRollSecond = 1;
    let dartsRollSecond = 1;
    let scoreOne = 1;
    let scoreTwo = 1;
    while (scoreOne === scoreTwo) {
        diceRollOne = Math.floor(Math.random() * 6) + 1;
        basketballRollOne = Math.floor(Math.random( ) * (1+1));
        dartsRollOne = Math.floor(Math.random() * 6) + 1;
        diceRollSecond = Math.floor(Math.random() * 6) + 1;
        basketballRollSecond = Math.floor(Math.random( ) * (1+1));
        dartsRollSecond = Math.floor(Math.random() * 6) + 1;
        if (diceRollOne > diceRollSecond) {
            scoreOne = 1;
            scoreTwo = 0;
        } if (diceRollOne < diceRollSecond) {
            scoreOne = 0;
            scoreTwo = 1;
        } if (diceRollOne === diceRollSecond) {
            scoreOne = 1;
            scoreTwo = 1;
        }


        if (basketballRollOne > basketballRollSecond) {
            scoreOne = scoreOne + 1;
        } if (basketballRollOne < basketballRollSecond) {
            scoreTwo = scoreTwo + 1;
        } if (basketballRollOne === basketballRollSecond) {
            scoreOne = scoreOne + 1;
            scoreTwo = scoreTwo + 1;
        }

        if (dartsRollOne > dartsRollSecond) {
            scoreOne = scoreOne + 1;
        } if (dartsRollOne < dartsRollSecond) {
            scoreTwo = scoreTwo + 1;
        } if (dartsRollOne === dartsRollSecond) {
            scoreOne = scoreOne + 1;
            scoreTwo = scoreTwo + 1;
        }


        console.log(scoreOne);
        console.log(scoreTwo);
        if (scoreOne > scoreTwo) {
            let resultOne = 0;
            let resultTwo = 0;


            function diceResult() {
                if (diceRollOne > diceRollSecond) {
                    resultOne = 1;
                    resultTwo = 0;       
                } if (diceRollOne < diceRollSecond) {
                    resultOne = 0;
                    resultTwo = 1;       
                } if (diceRollOne === diceRollSecond) {
                    resultOne = 1;
                    resultTwo = 1;
                }
                bot.sendMessage(playerOne, `–°—á–µ—Ç: ${resultOne} - ${resultTwo}`);
                bot.sendMessage(playerTwo, `–°—á–µ—Ç: ${resultTwo} - ${resultOne}`);
            }


            function basketballResult() {
                if (basketballRollOne > basketballRollSecond) {
                    resultOne = resultOne + 1;   
                } if (basketballRollOne < basketballRollSecond) {
                    resultTwo = resultTwo + 1;       
                } if (basketballRollOne === basketballRollSecond) {
                    resultOne = resultOne + 1; 
                    resultTwo = resultTwo + 1;       
                }
                bot.sendMessage(playerOne, `–°—á–µ—Ç: ${resultOne} - ${resultTwo}`);
                bot.sendMessage(playerTwo, `–°—á–µ—Ç: ${resultTwo} - ${resultOne}`);

            }



            function dartsResult() {
                if (dartsRollOne > dartsRollSecond) {
                    resultOne = resultOne + 1;   
                } if (dartsRollOne < dartsRollSecond) {
                    resultTwo = resultTwo + 1;       
                } if (dartsRollOne === dartsRollSecond) {
                    resultOne = resultOne + 1; 
                    resultTwo = resultTwo + 1;       
                }
                bot.sendMessage(playerOne, `–°—á–µ—Ç: ${resultOne} - ${resultTwo}.
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!`);
                bot.sendMessage(playerTwo, `–°—á–µ—Ç: ${resultTwo} - ${resultOne}.
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`);
            }
            function basketballRoll() {
                welcomeMessage('–ë–∞—Å–∫–µ—Ç–±–æ–ª', '–º—è—á');
            }
            function dartsRoll() {
                welcomeMessage('–î–∞—Ä—Ç—Å', '–¥—Ä–æ—Ç–∏–∫');
            }
            welcomeMessage('–ö–æ—Å—Ç–∏', '–∫–æ—Å—Ç—å');
            setTimeout(diceResult, 4000);
            setTimeout(basketballRoll, 4200);
            setTimeout(basketballResult, 8000);
            setTimeout(dartsRoll, 8200);
            setTimeout(dartsResult, 12000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: +price, games: +1, win: +1, jackpot: +1, jackpot_win: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: -price, games: +1, lose: +1, jackpot: +1, jackpot_lose: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } 
        
        
        
        
        if (scoreTwo > scoreOne) {
            let resultOne = 0;
            let resultTwo = 0;


            function diceResult() {
                if (diceRollOne > diceRollSecond) {
                    resultOne = 1;
                    resultTwo = 0;       
                } if (diceRollOne < diceRollSecond) {
                    resultOne = 0;
                    resultTwo = 1;       
                } if (diceRollOne === diceRollSecond) {
                    resultOne = 1;
                    resultTwo = 1;
                }
                bot.sendMessage(playerOne, `–°—á–µ—Ç: ${resultOne} - ${resultTwo}`);
                bot.sendMessage(playerTwo, `–°—á–µ—Ç: ${resultTwo} - ${resultOne}`);
            }


            function basketballResult() {
                if (basketballRollOne > basketballRollSecond) {
                    resultOne = resultOne + 1;   
                } if (basketballRollOne < basketballRollSecond) {
                    resultTwo = resultTwo + 1;       
                } if (basketballRollOne === basketballRollSecond) {
                    resultOne = resultOne + 1; 
                    resultTwo = resultTwo + 1;       
                }
                bot.sendMessage(playerOne, `–°—á–µ—Ç: ${resultOne} - ${resultTwo}`);
                bot.sendMessage(playerTwo, `–°—á–µ—Ç: ${resultTwo} - ${resultOne}`);

            }



            function dartsResult() {
                if (dartsRollOne > dartsRollSecond) {
                    resultOne = resultOne + 1;   
                } if (dartsRollOne < dartsRollSecond) {
                    resultTwo = resultTwo + 1;       
                } if (dartsRollOne === dartsRollSecond) {
                    resultOne = resultOne + 1; 
                    resultTwo = resultTwo + 1;       
                }
                bot.sendMessage(playerTwo, `–°—á–µ—Ç: ${resultTwo} - ${resultOne}.
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!`);
                bot.sendMessage(playerOne, `–°—á–µ—Ç: ${resultOne} - ${resultTwo}.
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`);
            }
            function basketballRoll() {
                welcomeMessage('–ë–∞—Å–∫–µ—Ç–±–æ–ª', '–º—è—á');
            }
            function dartsRoll() {
                welcomeMessage('–î–∞—Ä—Ç—Å', '–¥—Ä–æ—Ç–∏–∫');
            }
            welcomeMessage('–ö–æ—Å—Ç–∏', '–∫–æ—Å—Ç—å');
            setTimeout(diceResult, 4000);
            setTimeout(basketballRoll, 4200);
            setTimeout(basketballResult, 8000);
            setTimeout(dartsRoll, 8200);
            setTimeout(dartsResult, 12000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: -price, games: +1, lose: +1, jackpot: +1, jackpot_lose: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: +price, games: +1, win: +1, jackpot: +1, jackpot_win: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (scoreOne === scoreTwo) {
                bot.sendMessage(playerTwo, `–°—á–µ—Ç: ${scoreTwo} - ${scoreOne}.
–ù–∏—á—å—è, –ø–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º...`);
                bot.sendMessage(playerOne, `–°—á–µ—Ç: ${scoreOne} - ${scoreTwo}.
–ù–∏—á—å—è, –ø–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º...`);
        }
    }
} if (gameName === '–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç') {
    while (rollOne === rollTwo) {
        rollOne = Math.floor(Math.random() * 6) + 1;
        rollTwo = Math.floor(Math.random() * 6) + 1;
        if (rollOne > rollTwo) {
            function playerOneWin() {
                bot.sendMessage(playerOne, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
                bot.sendMessage(playerTwo, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
            }
            setTimeout(playerOneWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: +price, games: +1, win: +1, slot: +1, slot_win: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: -price, games: +1, lose: +1, slot: +1, slot_lose: +1 }})
            .catch((err) => console.log(err))
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollTwo > rollOne) {
            function playerTwoWin() {
                bot.sendMessage(playerTwo, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
                bot.sendMessage(playerOne, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
            }
            setTimeout(playerTwoWin, 4000);
            User.findOneAndUpdate({id: playerOne}, { $inc: { game_balance: -price, games: +1, lose: +1, dice: +1, slot_lose: +1 }})
            .catch((err) => console.log(err))
            User.findOneAndUpdate({id: playerTwo}, { $inc: { game_balance: +price, games: +1, win: +1, dice: +1, slot_win: +1 }})
            .catch((err) => console.log(err))
            GlobalStats.findOneAndUpdate({ id: 1 }, { $inc: { games: +1, games_chips: +1 }})
            .catch((err) => console.log(err));
            Game.findOneAndDelete({id: gameId})
            .catch((err) => console.log(err))
        } if (rollTwo === rollOne) {
            bot.sendMessage(playerTwo, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollTwo}`);
            bot.sendMessage(playerOne, `–ù–∏—á—å—è. –í–∞—à–µ —á–∏—Å–ª–æ: ${rollOne}`);
            bot.sendMessage(playerOne, `üé≤ –ö–æ—Å—Ç–∏ ${activeGames[gameNumber].id}
üí∞ –ë–∞–Ω–∫: ${activeGames[gameNumber].price}
–ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç—å...`);
            bot.sendMessage(playerTwo, `üé≤ –ö–æ—Å—Ç–∏ ${activeGames[gameNumber].id}
üí∞ –ë–∞–Ω–∫: ${activeGames[gameNumber].price}
–ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç—å...`);
        }
    }
}
}








function createGameRoom(owner, gameName, price) {
    const id = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000;
    Game.init()
    .then(() => {
        Game.create({ id, owner, gameName, price})
    })
    .then(() => state = [])
    .catch((err) => console.log(err));
    bot.sendMessage(owner, '‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!', {
        reply_markup: {inline_keyboard: [
            [{text: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', callback_data: `–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É ${gameName}`}],
            [{text: '–ù–∞–∑–∞–¥', callback_data: `${gameName}`}]
    ]
    
}
    })
}

function priceSelect(chatId, gameName) {
    setState(chatId, 1100);
    User.findOne({ id: chatId })
    .then((user) => {
        bot.sendMessage(chatId, `üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.game_balance} üé´ 
üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –æ—Ç 400 –¥–æ 5000 üé´ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'`, {
            reply_markup: {inline_keyboard: [
                [{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É ${gameName}`}]
        ]
        
    }
        })
    })
    .catch((err) => console.log(err))
}


function gameAccept(price, gameNumber, chatId) {
    User.findOne({ id: chatId })
    .then((user) => {
        if (chatId === activeGames[gameNumber].owner) {
            bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π');
            games(chatId);
        } if(chatId !== activeGames[gameNumber].owner && user.game_balance >= price) {
            bot.sendMessage(chatId, `üíµ –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ ${price} üé´
    
            ‚ö†Ô∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!
            ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É?`, {
                    reply_markup: {inline_keyboard: [
                        [{text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `–ò–≥—Ä–∞ ${gameNumber} –Ω–∞—á–∞–ª–∞—Å—å`}],
                        [{text: '–ù–∞–∑–∞–¥', callback_data: '–ö–æ—Å—Ç–∏'}]
                ]
                
                }
                });
        } if (user.game_balance < price) {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }
    })
}

function welcome(chatId, name) {

    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç,' + ' ' + name, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º',
                        callback_data: '–°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º'
                    }
                ],
                [
                    {
                        text: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã',
                        url: 'https://t.me/midaslist'
                    }
                ],
                [
                    {
                        text: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
                        callback_data: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'
                    }
                ],
                [
                    {
                        text: '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ',
                        callback_data: '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ'
                    }
                ],
                [
                    {
                        text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                        url: 'https://t.me/andrewkrss'
                    }
                ],
            ]
        }
    })
}


function deals(chatId) {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
        reply_markup: {inline_keyboard: [
            [{text: '–ü—Ä–æ–¥–∞–∂–∏', callback_data: '–ü—Ä–æ–¥–∞–∂–∏'}, {text: '–ü–æ–∫—É–ø–∫–∏', callback_data: '–ü–æ–∫—É–ø–∫–∏'}],
            [{text: '–ù–∞–∑–∞–¥', callback_data: '1'}, {text: '–ò—Å—Ç–æ—Ä–∏—è', callback_data: '–ò—Å—Ç–æ—Ä–∏—è'}],
    ]
    
}
    })
}

function games(chatId) {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
        reply_markup: {inline_keyboard: [
            [{text: 'Cash', callback_data: 'Cash'}, {text: '–§–∏—à–∫–∏', callback_data: '–§–∏—à–∫–∏'}],
            [{text: '–ú–æ–∏ –≤—ã–∑–æ–≤—ã', callback_data: '–ú–æ–∏ –≤—ã–∑–æ–≤—ã'}],
    ]
    
}
    })
}

function oneBackButton(chatId, text, callback) {
    bot.sendMessage(chatId, text, {
        reply_markup: {inline_keyboard: [
            [{text: '–ù–∞–∑–∞–¥', callback_data: callback}]
    ]
    
}
    })
}

function gamesList(chatId) {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
        reply_markup: {inline_keyboard: [
            [{text: '–ö–æ—Å—Ç–∏', callback_data: '–ö–æ—Å—Ç–∏'}, {text: '–î–∞—Ä—Ç—Å', callback_data: '–î–∞—Ä—Ç—Å'}],
            [{text: '–ö–æ—Å—Ç–∏ x2', callback_data: '–ö–æ—Å—Ç–∏ x2'}, {text: '–ë–∞—Å–∫–µ—Ç–±–æ–ª', callback_data: '–ë–∞—Å–∫–µ—Ç–±–æ–ª'}],
            [{text: '–î–∂–µ–∫–ø–æ—Ç', callback_data: '–î–∂–µ–∫–ø–æ—Ç'}, {text: '–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç', callback_data: '–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç'}],
            [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã'}, {text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}],
    ]
    
}
    })
}

function gameCreate(chatId, game) {
    activeGames = [];
    Game.find({gameName: game})
    .then((games) => {
        games.forEach((game) => {
            const newGame = {};
            newGame.id = game.id;
            newGame.owner = game.owner;
            newGame.gameName = game.gameName;
            newGame.price = game.price;
            activeGames.push(newGame);
        })
        
    })
    .then(() => {

        if (activeGames.length === 0) {
            bot.sendMessage(chatId, 'üé≤ –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ –∏–º–µ—é—â—É—é—Å—è:', {
                reply_markup: {inline_keyboard: [
                    [{text: '–ü—Ä–∞–≤–∏–ª–∞', callback_data: '–ü—Ä–∞–≤–∏–ª–∞ ' + game}, {text: '–†–µ–π—Ç–∏–Ω–≥', callback_data: '–†–µ–π—Ç–∏–Ω–≥ ' + game}],
                    [{text: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', callback_data: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É ' + game}, {text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: game}],
                    [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã'}, {text: '–ú–æ–∏ –∏–≥—Ä—ã', callback_data: '–ú–æ–∏ –∏–≥—Ä—ã ' + game}],
            ]
            
        }
            })
        }
        
        if (activeGames.length === 1) {
            bot.sendMessage(chatId, 'üé≤ –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ –∏–º–µ—é—â—É—é—Å—è:', {
                reply_markup: {inline_keyboard: [
                    [{text: '–ü—Ä–∞–≤–∏–ª–∞', callback_data: '–ü—Ä–∞–≤–∏–ª–∞ ' + game}, {text: '–†–µ–π—Ç–∏–Ω–≥', callback_data: '–†–µ–π—Ç–∏–Ω–≥ ' + game}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[0].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 1'}],
                    [{text: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', callback_data: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É ' + game}, {text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: game}],
                    [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã'}, {text: '–ú–æ–∏ –∏–≥—Ä—ã', callback_data: '–ú–æ–∏ –∏–≥—Ä—ã ' + game}],
            ]
            
        }
            })
        }         if (activeGames.length === 2) {
            bot.sendMessage(chatId, 'üé≤ –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ –∏–º–µ—é—â—É—é—Å—è:', {
                reply_markup: {inline_keyboard: [
                    [{text: '–ü—Ä–∞–≤–∏–ª–∞', callback_data: '–ü—Ä–∞–≤–∏–ª–∞ ' + game}, {text: '–†–µ–π—Ç–∏–Ω–≥', callback_data: '–†–µ–π—Ç–∏–Ω–≥ ' + game}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[0].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 1'}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[1].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 2'}],
                    [{text: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', callback_data: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É ' + game}, {text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: game}],
                    [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã'}, {text: '–ú–æ–∏ –∏–≥—Ä—ã', callback_data: '–ú–æ–∏ –∏–≥—Ä—ã ' + game}],
            ]
            
        }
            })
        }         if (activeGames.length === 3) {
            bot.sendMessage(chatId, 'üé≤ –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ –∏–º–µ—é—â—É—é—Å—è:', {
                reply_markup: {inline_keyboard: [
                    [{text: '–ü—Ä–∞–≤–∏–ª–∞', callback_data: '–ü—Ä–∞–≤–∏–ª–∞ ' + game}, {text: '–†–µ–π—Ç–∏–Ω–≥', callback_data: '–†–µ–π—Ç–∏–Ω–≥ –∫–æ—Å—Ç–µ–π ' + game}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[0].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 1'}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[1].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 2'}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[2].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 3'}],
                    [{text: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', callback_data: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É ' + game}, {text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: game}],
                    [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã'}, {text: '–ú–æ–∏ –∏–≥—Ä—ã', callback_data: '–ú–æ–∏ –∏–≥—Ä—ã ' + game}],
            ]
            
        }
            })
        }         if (activeGames.length > 3) {
            bot.sendMessage(chatId, 'üé≤ –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–∂–µ –∏–º–µ—é—â—É—é—Å—è:', {
                reply_markup: {inline_keyboard: [
                    [{text: '–ü—Ä–∞–≤–∏–ª–∞', callback_data: '–ü—Ä–∞–≤–∏–ª–∞ ' + game}, {text: '–†–µ–π—Ç–∏–Ω–≥', callback_data: '–†–µ–π—Ç–∏–Ω–≥ –∫–æ—Å—Ç–µ–π ' + game}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[0].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 1'}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[1].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 2'}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[2].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 3'}],
                    [{text: `–ò–≥—Ä–∞ #${activeGames[3].id}`, callback_data: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 4'}],
                    [{text: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', callback_data: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É ' + game}, {text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: game}],
                    [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã'}, {text: '–ú–æ–∏ –∏–≥—Ä—ã', callback_data: '–ú–æ–∏ –∏–≥—Ä—ã ' + game}],
            ]
            
        }
            })
        }
    }) 
    .catch((err) => console.log(err))
}






let bannedOrNot = 0;
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const name = msg.from.first_name;
    if (bannedOrNot === 0) {
        User.findOne({id: chatId})
        .then((user) => {
            bannedOrNot = user.banned;
        })
        .catch((err) => console.log(err));
    }
    if (bannedOrNot === 'yes') {
        bot.sendMessage(chatId, '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã');
    }
    if (msg.text === 'üî∞ –ú–µ–Ω—é' && bannedOrNot !== 'yes') {
        welcome(chatId, name);
    } if (msg.text === 'ü§ñ –ì–∞—Ä–∞–Ω—Ç' && bannedOrNot !== 'yes') {
        bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–∞—Ä–∞–Ω—Ç', {
            reply_markup: {inline_keyboard: [
                [{text: '–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data: '–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É'}],
                [{text: '–°–¥–µ–ª–∫–∏', callback_data: '–°–¥–µ–ª–∫–∏'}, {text: '–†–µ–π—Ç–∏–Ω–≥', callback_data: '1'}],
                [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: '1'}],
        ]
        
    }
        })
    } if (msg.text === 'üíº –ö–æ—à–µ–ª–µ–∫' && bannedOrNot !== 'yes') {
        User.findOne({id: chatId})
        .then((user) => {
            bot.sendMessage(chatId, `
üíº RUB –±–∞–ª–∞–Ω—Å:
‚îî ${user.balance} RUB
üé´ –§–∏—à–∫–∏:
‚îî ${user.game_balance} üé´`)
        })
    } if (msg.text === 'üß© –ò–≥—Ä—ã' && bannedOrNot !== 'yes') {
        games(chatId);
    } if (msg.text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' && bannedOrNot !== 'yes') {
        User.findOne({id: chatId})
        .then((user) => {
            bot.sendMessage(chatId, 
`‚ÑπÔ∏è Username: @${user.username}
                
üÜî ${user.id}
üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.date}
                        
ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: ${user.deals}
üìà –ö–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü: ${user.deals_seller}
üìâ –ö–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: ${user.deals_buyer}`, {
                
                        })
        })
    } if (msg.text === '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å') {
        if (chatId === 424446979 || chatId === 787025148) {
            bot.sendMessage(chatId, '–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', {
                reply_markup: {inline_keyboard: [
                    [{text: '–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: '–ë–∞–Ω'}],
                    [{text: '–†–∞—Å—Å—ã–ª–∫–∞', callback_data: '–†–∞—Å—Å—ã–ª–∫–∞'}],
                    [{text: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', callback_data: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'}],
                    [{text: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', callback_data: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞'}],
                    [{text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω'}],
                    [{text: '–ù–∞–∑–∞–¥', callback_data: '–ú–µ–Ω—é'}],
            ]
            
        }
            })
        }
    }
    
    });



bot.onText(/\/start/, msg => {
        const chatId = msg.chat.id;
        const name = msg.from.first_name;
        welcome(chatId, name);
})




bot.onText(/\/start/, msg => {
    console.log(msg);
    const id = msg.from.id;
    const name = msg.from.first_name;
    const username = msg.from.username;
    const balance = 0;
    const game_balance = 5000;
    const date = msg.date;
    const deals = 0;
    const deals_seller = 0;
    const deals_buyer = 0;
    const games = 0;
    const win = 0;
    const lose = 0;
    const dice = 0;
    const dice_win = 0;
    const dice_lose = 0;
    const double_dice = 0;
    const double_dice_win = 0;
    const double_dice_lose = 0;
    const darts = 0;
    const darts_win = 0;
    const darts_lose = 0;
    const basketball = 0;
    const basketball_win = 0;
    const basketball_lose = 0;
    const jackpot = 0;
    const jackpot_win = 0;
    const jackpot_lose = 0;
    const slot = 0;
    const slot_win = 0;
    const slot_lose = 0;
    const banned = 'no';

    User.init().then(() => {
        User.create({ id, username, name, balance, game_balance, date, deals, deals_seller, deals_buyer, games, win, lose, dice, dice_win, dice_lose, 
            double_dice, double_dice_win, double_dice_lose, darts, darts_win, darts_lose, basketball, basketball_win, 
            basketball_lose, jackpot, jackpot_win, jackpot_lose, slot, slot_win, slot_lose, banned })
    })
    .catch((err) => console.log(err))
    bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç,' + ' ' + msg.from.first_name, {
        reply_markup: {
            'resize_keyboard': true,
            keyboard: [
                ['ü§ñ –ì–∞—Ä–∞–Ω—Ç', 'üíº –ö–æ—à–µ–ª–µ–∫'],
                ['üß© –ò–≥—Ä—ã', 'üî∞ –ú–µ–Ω—é'],
                ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
            ]
        }
    })
})


bot.on('message', async (msg) => {

    if (state[msg.chat.id] === 1100) {
        User.findOne({ id: msg.chat.id })
        .then((user) => {
            if (msg.text > 399 && msg.text < 5001 && user.game_balance >= msg.text) {
                state = msg.text;
                console.log(state);
            } if (msg.text < 400 || msg.text > 5000) {
                bot.sendMessage(msg.chat.id, '–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 400 –¥–æ 5000')
                gamesList(msg.chat.id);
            } if (user.game_balance < msg.text) {
                bot.sendMessage(msg.chat.id, `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.game_balance}`)
                gamesList(msg.chat.id);
            }
        })
    } if (state[msg.chat.id] === 1000) {
        userId = msg.text;
        User.findOneAndUpdate({ id: userId }, {banned: 'yes'})
        .catch((err) => console.log(err));
    } if (state[msg.chat.id] === 900) {
        text = msg.text;
        User.find()
        .then((users) => {
            users.forEach((user) => {
                bot.sendMessage(user.id, text);
            })
        })
        .catch((err) => console.log(err))
    } if (state[msg.chat.id] === 800) {
        text = msg.text;
        let id = text.split(',')[0];
        let value = text.split(',')[1];
        User.findOneAndUpdate({id: id}, {game_balance: value})
        .catch((err) => console.log(err));
    } if (state[msg.chat.id] === 700) {
        text = msg.text;
        let id = text.split(',')[0];
        let value = text.split(',')[1];
        User.findOneAndUpdate({id: id}, {balance: value})
        .catch((err) => console.log(err));
    }
})
bot.on('callback_query', query => {
    const data = query.data;
    const chatId = query.message.chat.id;
    const botMessage = query.message.message_id;


    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–±–∞–Ω–µ–Ω/–Ω–µ –∑–∞–±–∞–Ω–µ–Ω

    if (bannedOrNot === 'yes') {
        bot.sendMessage(chatId, '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã');
    } else {



    //–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

    if (data === '–ë–∞–Ω') {
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å');
        setState(chatId, 1000)
    } if (data === '–†–∞—Å—Å—ã–ª–∫–∞') {
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
        setState(chatId, 900);
    } if (data === '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞') {
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 530856035,500');
        setState(chatId, 800);
    } if (data === '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞') {
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 530856035,500');
        setState(chatId, 700);
    } if (data === '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω') {
        GlobalStats.findOne({ id: 1 })
        .then((item) => {
            bot.sendMessage(chatId, `
–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${item.games}
–ò–≥—Ä –Ω–∞ —Ñ–∏—à–∫–∏: ${item.games_chips}
–ò–≥—Ä –Ω–∞ –∫—ç—à: ${item.games_cash}
–°–¥–µ–ª–æ–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–æ: ${item.deals}
–ü—Ä–æ–¥–∞–∂: ${item.sales}
–ü–æ–∫—É–ø–æ–∫: ${item.purchases}
–°–ø–æ—Ä–æ–≤: ${item.disputes}
            `);
        })
        .catch((err) => console.log(err));
    }

    //–ú–µ–Ω—é
    if (data === '–ú–µ–Ω—é') {
        deleteLastMessage(chatId, botMessage);
        welcome(chatId, query.message.chat.first_name);
    }

    if (data === '–°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º') {
        deleteLastMessage(chatId, botMessage);
        bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ü—Ä–æ–¥–∞–≤–µ—Ü"?
‚îî üì´ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.
       
‚ôªÔ∏è –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í–∞—à–µ–π –∑–∞—è–≤–∫–∏
‚îîüì© –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏`, {
    reply_markup: {inline_keyboard: [
        [{text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/andrewkrss'}],
        [{text: '–ù–∞–∑–∞–¥', callback_data: '–ú–µ–Ω—é'}, {text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: '–ê–Ω–∫–µ—Ç–∞'}],       
]
    }
})
    } if (data === '–ê–Ω–∫–µ—Ç–∞') {
        deleteLastMessage(chatId, botMessage);
        bot.sendMessage(chatId, `üì¨ –ê–Ω–∫–µ—Ç–∞
‚îî  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ —Ñ–æ—Ä–º–µ.
        
üìù –§–æ—Ä–º–∞
‚îî –ß—Ç–æ –í—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å?
‚îî –ö–∞–∫ –¥–∞–≤–Ω–æ –í—ã –≤ —Å–≤–æ–µ–π —Å—Ñ–µ—Ä–µ?
‚îî –ï—Å—Ç—å –ø–æ—Ä—É—á–∏—Ç–µ–ª—å/–æ—Ç–≤–µ—Ç—á–∏–∫?
‚îî –û—Ç–∑—ã–≤—ã —Å—é–¥–∞ –∏–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
‚îî –ü—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö?
‚îî –í–µ—Ç–∫–∏ –Ω–∞ —Ñ–æ—Ä—É–º–∞—Ö (—Å—Å—ã–ª–∫–∏)
        
‚ö†Ô∏è  –ü—Ä–∏—Å—ã–ª–∞—Ç—å –∞–Ω–∫–µ—Ç—É 1 —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
‚îî‚ùóÔ∏è –ë–µ–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–µ—Ç–æ–∫ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫—É`, {
    reply_markup: {inline_keyboard: [
        [{text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: '–ú–µ–Ω—é'}],       
]
    }
})
    } if (data === '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ') {
        deleteLastMessage(chatId, botMessage);
        bot.sendMessage(chatId, '–ü—Ä–∏ –Ω–∞—á–∞–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –°–æ–≥–ª–∞—à–µ–Ω–∏—è (https://telegra.ph/Polzovatelskoe-sogshlashenie-Midas-10-31) –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ. ‚úîÔ∏è', {
            reply_markup: {inline_keyboard: [
                [{text: '–ù–∞–∑–∞–¥', callback_data: '–ú–µ–Ω—é'}],
        ]
        
    }
        })
    }

  
        

    // –ì–∞—Ä–∞–Ω—Ç
    if (data === '–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É') {
        deleteLastMessage(chatId, botMessage);
        bot.sendMessage(chatId, '–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É @username –ü—Ä–æ–¥–∞–≤—Ü–∞', {
            reply_markup: {inline_keyboard: [
                [{text: '–ù–∞–∑–∞–¥', callback_data: '–ì–∞—Ä–∞–Ω—Ç'}],
        ]
        
    }
        })
    } if (data === '–ì–∞—Ä–∞–Ω—Ç') {
        deleteLastMessage(chatId, botMessage);
        bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–∞—Ä–∞–Ω—Ç', {
            reply_markup: {inline_keyboard: [
                [{text: '–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data: '–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É'}],
                [{text: '–°–¥–µ–ª–∫–∏', callback_data: '–°–¥–µ–ª–∫–∏'}, {text: '–†–µ–π—Ç–∏–Ω–≥', callback_data: '–†–µ–π—Ç–∏–Ω–≥'}],
                [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}],
        ]
        
    }
        })
    } if (data === '–°–¥–µ–ª–∫–∏') {
        deleteLastMessage(chatId, botMessage);
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
            reply_markup: {inline_keyboard: [
                [{text: '–ü—Ä–æ–¥–∞–∂–∏', callback_data: '–ü—Ä–æ–¥–∞–∂–∏'}, {text: '–ü–æ–∫—É–ø–∫–∏', callback_data: '–ü–æ–∫—É–ø–∫–∏'}],
                [{text: '–ù–∞–∑–∞–¥', callback_data: '–ì–∞—Ä–∞–Ω—Ç'}, {text: '–ò—Å—Ç–æ—Ä–∏—è', callback_data: '–ò—Å—Ç–æ—Ä–∏—è'}],
        ]
        
    }
        })
    } if (data === '–ü—Ä–æ–¥–∞–∂–∏') {
        deleteLastMessage(chatId, botMessage);
        oneBackButton(chatId, '–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', '–ù–∞–∑–∞–¥ –≤ —Å–¥–µ–ª–∫–∏');
    } if (data === '–ù–∞–∑–∞–¥ –≤ —Å–¥–µ–ª–∫–∏') {
        deleteLastMessage(chatId, botMessage);
        deals(chatId);
    } if (data === '–ü–æ–∫—É–ø–∫–∏') {
        deleteLastMessage(chatId, botMessage);
        oneBackButton(chatId, '–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', '–ù–∞–∑–∞–¥ –≤ —Å–¥–µ–ª–∫–∏');
    } if (data === '–ò—Å—Ç–æ—Ä–∏—è') {
        deleteLastMessage(chatId, botMessage);
        oneBackButton(chatId, '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', '–ù–∞–∑–∞–¥ –≤ —Å–¥–µ–ª–∫–∏');
    } if (data === '–†–µ–π—Ç–∏–Ω–≥') {
        deleteLastMessage(chatId, botMessage);
        oneBackButton(chatId, '–¢–æ–ø 3 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å–¥–µ–ª–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é', '–ù–∞–∑–∞–¥ –≤ —Å–¥–µ–ª–∫–∏');
    } if (data === '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
        deleteLastMessage(chatId, botMessage);
        bot.sendMessage(chatId, '–ü—Ä–∞–≤–∏–ª–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≥–∞—Ä–∞–Ω—Ç-–±–æ—Ç–æ–º - –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è', {
            reply_markup: {inline_keyboard: [
                [{text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'}],
                [{text: '–ù–∞–∑–∞–¥', callback_data: '–ù–∞–∑–∞–¥ –≤ —Å–¥–µ–ª–∫–∏'}]
        ]
        
    }
        })
    }

    // –ò–≥—Ä—ã

    if (data === 'Cash') {
        deleteLastMessage(chatId, botMessage);
        gamesList(chatId);
    } if (data === '–§–∏—à–∫–∏') {
        deleteLastMessage(chatId, botMessage);
        gamesList(chatId);
    } if (data === '–ú–æ–∏ –≤—ã–∑–æ–≤—ã') {
        deleteLastMessage(chatId, botMessage);
        oneBackButton(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤', '–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã');
    } if (data === '–ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—ã') {
        deleteLastMessage(chatId, botMessage);
        games(chatId);
    } if (data === '–ö–æ—Å—Ç–∏') {
        deleteLastMessage(chatId, botMessage);
        gameCreate(chatId, '–ö–æ—Å—Ç–∏');
    } if (data === '–î–∞—Ä—Ç—Å') {
        deleteLastMessage(chatId, botMessage);
        gameCreate(chatId, '–î–∞—Ä—Ç—Å');
    } if (data === '–ö–æ—Å—Ç–∏ x2') {
        deleteLastMessage(chatId, botMessage);
        gameCreate(chatId, '–ö–æ—Å—Ç–∏ x2');
    } if (data === '–ë–∞—Å–∫–µ—Ç–±–æ–ª') {
        deleteLastMessage(chatId, botMessage);
        gameCreate(chatId, '–ë–∞—Å–∫–µ—Ç–±–æ–ª');
    } if (data === '–î–∂–µ–∫–ø–æ—Ç') {
        deleteLastMessage(chatId, botMessage);
        gameCreate(chatId, '–î–∂–µ–∫–ø–æ—Ç');
    } if (data === '–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç') {
        deleteLastMessage(chatId, botMessage);
        gameCreate(chatId, '–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç');
    } if (data === '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        deleteLastMessage(chatId, botMessage);
        User.findOne({id: chatId})
        .then((user) => {
            bot.sendMessage(chatId, `
üß© –í—Å–µ–≥–æ –∏–≥—Ä: ${user.games}
üéä –ü–æ–±–µ–¥: ${user.win}
üí¢ –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π: ${user.lose}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üé≤ –ö–æ—Å—Ç–∏: ${user.dice_win} : ${user.dice_lose}
üé≤üé≤ –ö–æ—Å—Ç–∏: ${user.double_dice_win} : ${user.double_dice_lose}
üéØ –î–∞—Ä—Ç—Å: ${user.darts_win} : ${user.darts_lose}
üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª: ${user.basketball_win} : ${user.basketball_lose}
üé∞ –î–∂–µ–∫–ø–æ—Ç: ${user.jackpot_win} : ${user.jackpot_lose}
üé∞ –ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç: ${user.slot_win} : ${user.slot_lose}`);
        })
    } 
    
    
    if (data === '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –ö–æ—Å—Ç–∏') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–ö–æ—Å—Ç–∏';
        priceSelect(chatId, gameName);
    } if (data === '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –î–∞—Ä—Ç—Å') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–î–∞—Ä—Ç—Å';
        priceSelect(chatId, gameName);
    } if (data === '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –ö–æ—Å—Ç–∏ x2') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–ö–æ—Å—Ç–∏ x2';
        priceSelect(chatId, gameName);
    } if (data === '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –ë–∞—Å–∫–µ—Ç–±–æ–ª') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–ë–∞—Å–∫–µ—Ç–±–æ–ª';
        priceSelect(chatId, gameName);
    } if (data === '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –î–∂–µ–∫–ø–æ—Ç') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–î–∂–µ–∫–ø–æ—Ç';
        priceSelect(chatId, gameName);
    } if (data === '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç';
        priceSelect(chatId, gameName);
    } 
    
    
    
    
    if (data === '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ö–æ—Å—Ç–∏') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–ö–æ—Å—Ç–∏'
        const price = state;
        createGameRoom(chatId, gameName, price)
    } if (data === '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –î–∞—Ä—Ç—Å') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–î–∞—Ä—Ç—Å'
        const price = state;
        createGameRoom(chatId, gameName, price)
    } if (data === '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ö–æ—Å—Ç–∏ x2') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–ö–æ—Å—Ç–∏ x2'
        const price = state;
        createGameRoom(chatId, gameName, price)
    } if (data === '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ë–∞—Å–∫–µ—Ç–±–æ–ª') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–ë–∞—Å–∫–µ—Ç–±–æ–ª'
        const price = state;
        createGameRoom(chatId, gameName, price)
    } if (data === '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –î–∂–µ–∫–ø–æ—Ç') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–î–∂–µ–∫–ø–æ—Ç'
        const price = state;
        createGameRoom(chatId, gameName, price)
    } if (data === '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç') {
        deleteLastMessage(chatId, botMessage);
        const gameName = '–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç'
        const price = state;
        createGameRoom(chatId, gameName, price)
    }
    
    
    
    
    if (data === '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 1') {
        deleteLastMessage(chatId, botMessage);
        gameAccept(activeGames[0].price, 0, chatId)
    } if (data === '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 2') {
        deleteLastMessage(chatId, botMessage);
        gameAccept(activeGames[1].price, 1, chatId)
    } if (data === '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 3') {
        deleteLastMessage(chatId, botMessage);
        gameAccept(activeGames[2].price, 2, chatId)
    } if (data === '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã 4') {
        deleteLastMessage(chatId, botMessage);
        gameAccept(activeGames[3].price, 3, chatId)
    } 
    
    
    
    if (data === '–ò–≥—Ä–∞ 0 –Ω–∞—á–∞–ª–∞—Å—å') {
        deleteLastMessage(chatId, botMessage);
        const gameId = activeGames[0].id;
        const price = activeGames[0].price;
        const playerOne = activeGames[0].owner;
        const gameName = activeGames[0].gameName;
        const gameNumber = 0;
        const playerTwo = chatId;
        playGame(gameId, price, playerOne, playerTwo, gameName, gameNumber) 
    } if (data === '–ò–≥—Ä–∞ 1 –Ω–∞—á–∞–ª–∞—Å—å') {
        deleteLastMessage(chatId, botMessage);
        const gameId = activeGames[1].id;
        const price = activeGames[1].price;
        const playerOne = activeGames[1].owner;
        const gameName = activeGames[1].gameName;
        const gameNumber = 1;
        const playerTwo = chatId;
        playGame(gameId, price, playerOne, playerTwo, gameName, gameNumber) 
    } if (data === '–ò–≥—Ä–∞ 2 –Ω–∞—á–∞–ª–∞—Å—å') {
        deleteLastMessage(chatId, botMessage);
        const gameId = activeGames[2].id;
        const price = activeGames[2].price;
        const playerOne = activeGames[2].owner;
        const gameName = activeGames[2].gameName;
        const gameNumber = 2;
        const playerTwo = chatId;
        playGame(gameId, price, playerOne, playerTwo, gameName, gameNumber) 
    } if (data === '–ò–≥—Ä–∞ 3 –Ω–∞—á–∞–ª–∞—Å—å') {
        deleteLastMessage(chatId, botMessage);
        const gameId = activeGames[3].id;
        const price = activeGames[3].price;
        const playerOne = activeGames[3].owner;
        const gameName = activeGames[3].gameName;
        const gameNumber = 3;
        const playerTwo = chatId;
        playGame(gameId, price, playerOne, playerTwo, gameName, gameNumber) 
    } 
}
})



console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
